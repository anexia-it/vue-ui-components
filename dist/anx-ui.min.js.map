{"version":3,"file":"anx-ui.min.js","sources":["../src/components/AnxAlert.vue","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../node_modules/vue-runtime-helpers/dist/inject-style/browser.mjs","../src/components/AnxButton.vue","../src/components/AnxLink.vue","../src/components/AnxIcon.vue","../src/components/AnxTitle.vue","../src/components/AnxParagraph.vue","../src/components/AnxCard.vue","../src/components/AnxCheckbox.vue","../src/components/AnxContainer.vue","../src/components/AnxContent.vue","../src/components/AnxFooter.vue","../src/components/AnxForm.vue","../src/components/AnxGlobal.vue","../src/components/I18nLangSwitcher.vue","../src/components/AnxHeader.vue","../src/components/AnxInput.vue","../src/components/AnxModal.vue","../src/components/AnxReadonly.vue","../src/components/AnxSelect.vue","../src/components/AnxTableContainer.vue","../src/components/AnxTableRow.vue","../src/components/AnxTableCol.vue","../src/components/AnxTable.vue","../src/components/AnxTextarea.vue","../src/components/index.ts","../src/index.ts"],"sourcesContent":["<template>\n  <div\n    :id=\"name\"\n    :class=\"\n      'anx-alert ' +\n        `anx-alert-${type} ` +\n        (visibility ? 'visible ' : 'hidden ') +\n        (fadeIn ? 'fade-in ' : '') +\n        (fadeOut ? 'fade-out ' : '')\n    \"\n  >\n    <div class=\"message\">\n      <span>\n        <slot />\n      </span>\n    </div>\n    <div class=\"dismiss\" @click=\"input(!visibility)\">&times;</div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop, Watch, Emit } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxAlert extends Vue {\n  /** This is the id of the alert */\n  @Prop({ default: \"anx-alert\" }) name!: string;\n\n  /** The state of the alert (equals to show) */\n  @Prop({ default: null }) value!: boolean;\n\n  /** Define if animations like fade-in and fade-out should be used */\n  @Prop({ default: true }) animations!: boolean;\n\n  /** This is the type of the error. Possible is error, success */\n  @Prop({ default: \"error\" }) type!: string;\n\n  /** Watcher for show changes */\n  @Watch(\"value\")\n  onShowChanged(val: boolean) {\n    if (val) {\n      this.showAction();\n    } else {\n      this.hideAction();\n    }\n  }\n\n  /** Emit the dismiss event */\n  @Emit(\"input\")\n  input(val: boolean) {\n    return val;\n  }\n\n  /** Variables for anx-alert */\n  visibility = true;\n  fadeOut = false;\n  fadeIn = false;\n\n  /** Set visibility when mounting */\n  private mounted() {\n    this.visibility = this.value;\n  }\n\n  /** Show the alert */\n  private showAction() {\n    if (this.animations) {\n      this.fadeIn = true;\n      window.setTimeout(() => {\n        this.fadeIn = false;\n        this.visibility = true;\n      }, 1000);\n    } else {\n      this.visibility = true;\n    }\n  }\n\n  /** Hide the alert */\n  private hideAction() {\n    if (this.animations) {\n      this.fadeOut = true;\n      window.setTimeout(() => {\n        this.fadeOut = false;\n        this.visibility = false;\n      }, 1000);\n    } else {\n      this.visibility = false;\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-alert {\n  margin-bottom: $form-components-spacing;\n  display: flex;\n  opacity: 1;\n\n  &.fade-out {\n    opacity: 0 !important;\n    transition: opacity 0.5s ease-in-out;\n    -webkit-transition: opacity 0.5s ease-in-out;\n    -moz-transition: opacity 0.5s ease-in-out;\n    -ms-transition: opacity 0.5s ease-in-out;\n    -o-transition: opacity 0.5s ease-in-out;\n  }\n\n  &.fade-in {\n    opacity: 1 !important;\n    transition: opacity 0.5s ease-in-out;\n    -webkit-transition: opacity 0.5s ease-in-out;\n    -moz-transition: opacity 0.5s ease-in-out;\n    -ms-transition: opacity 0.5s ease-in-out;\n    -o-transition: opacity 0.5s ease-in-out;\n  }\n\n  &.hidden {\n    opacity: 0;\n  }\n\n  &.hidden:not(.fade-in) {\n    display: none;\n  }\n\n  .message {\n    padding: 16px;\n    line-height: 16px;\n  }\n\n  .dismiss {\n    line-height: 12px;\n    font-size: 24px;\n    height: 12px;\n    width: 12px;\n    align-self: center;\n    margin: auto;\n    margin-right: 16px;\n  }\n\n  .dismiss:hover {\n    cursor: pointer;\n  }\n\n  &.anx-alert-error {\n    border: 1px solid $anx-error;\n    background-color: $anx-error-light;\n    color: $anx-error;\n  }\n\n  &.anx-alert-success {\n    border: 1px solid $anx-primary-green;\n    background-color: $anx-primary-green-light;\n    color: $anx-primary-green;\n  }\n}\n</style>\n","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","const isOldIE = typeof navigator !== 'undefined' &&\r\n    /msie [6-9]\\\\b/.test(navigator.userAgent.toLowerCase());\r\nfunction createInjector(context) {\r\n    return (id, style) => addStyle(id, style);\r\n}\r\nlet HEAD;\r\nconst styles = {};\r\nfunction addStyle(id, css) {\r\n    const group = isOldIE ? css.media || 'default' : id;\r\n    const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });\r\n    if (!style.ids.has(id)) {\r\n        style.ids.add(id);\r\n        let code = css.source;\r\n        if (css.map) {\r\n            // https://developer.chrome.com/devtools/docs/javascript-debugging\r\n            // this makes source maps inside style tags work properly in Chrome\r\n            code += '\\n/*# sourceURL=' + css.map.sources[0] + ' */';\r\n            // http://stackoverflow.com/a/26603875\r\n            code +=\r\n                '\\n/*# sourceMappingURL=data:application/json;base64,' +\r\n                    btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +\r\n                    ' */';\r\n        }\r\n        if (!style.element) {\r\n            style.element = document.createElement('style');\r\n            style.element.type = 'text/css';\r\n            if (css.media)\r\n                style.element.setAttribute('media', css.media);\r\n            if (HEAD === undefined) {\r\n                HEAD = document.head || document.getElementsByTagName('head')[0];\r\n            }\r\n            HEAD.appendChild(style.element);\r\n        }\r\n        if ('styleSheet' in style.element) {\r\n            style.styles.push(code);\r\n            style.element.styleSheet.cssText = style.styles\r\n                .filter(Boolean)\r\n                .join('\\n');\r\n        }\r\n        else {\r\n            const index = style.ids.size - 1;\r\n            const textNode = document.createTextNode(code);\r\n            const nodes = style.element.childNodes;\r\n            if (nodes[index])\r\n                style.element.removeChild(nodes[index]);\r\n            if (nodes.length)\r\n                style.element.insertBefore(textNode, nodes[index]);\r\n            else\r\n                style.element.appendChild(textNode);\r\n        }\r\n    }\r\n}\n\nexport default createInjector;\n//# sourceMappingURL=browser.mjs.map\n","<template>\n  <button\n    :type=\"btnType\"\n    :class=\"className\"\n    :style=\"cssProps\"\n    @click=\"$emit(btnType)\"\n  >\n    {{ text }}\n  </button>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxButton extends Vue {\n  /**With this property, a button can be set */\n  /**Props\n   * btnType: the Type of a button\n   */\n  @Prop({ default: \"submit\" }) btnType!: string;\n  /**className: the class of the button\n   * options:\n   * \"anx-button\": the default class (green-animated-button to white outlined)\n   * \"anx-button btn-outline\": outlined-button (white-animated to green)\n   */\n  @Prop({ default: \"anx-button\" }) className!: string;\n  @Prop({ default: \"button\" }) text!: string;\n  @Prop({ default: \"136px\" }) width!: string;\n\n  get cssProps() {\n    return {\n      \"--button-width\": this.width\n    };\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\nbutton {\n  width: var(--button-width);\n  height: 2.5em; //40px\n  padding-top: 2px;\n  border: none;\n  font-size: 16px;\n  vertical-align: middle;\n  outline: 0 none;\n  padding: 0 2em; //links - rechts 32px\n  text-decoration: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  font-family: $anx-font-family;\n}\n\n/* anx-button - super cool animation button */\n/***/\n.anx-button {\n  z-index: 100;\n  position: relative;\n  backface-visibility: hidden;\n  -webkit-backface-visibility: hidden;\n  -moz-osx-font-smoothing: grayscale;\n  color: #fff;\n  font-weight: none;\n  -webkit-transition: color 0.3s;\n  transition: color 0.3s;\n  transition-timing-function: cubic-bezier(0.75, 0, 0.125, 1);\n  text-align: center;\n  background-color: transparent;\n  border: 1px solid transparent;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n\n  &:before,\n  &:after {\n    content: \"\";\n    z-index: -1;\n    border-radius: inherit;\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    backface-visibility: hidden;\n    -webkit-backface-visibility: hidden;\n    transition: opacity 0.3s, -webkit-transform 0.3s;\n    transition: transform 0.3s, opacity 0.3s;\n    transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n    transition-timing-function: cubic-bezier(0.75, 0, 0.125, 1);\n  }\n\n  &:before {\n    border: 1px solid $anx-primary-green;\n    opacity: 0;\n    -webkit-transform: scale3d(1.2, 1.2, 1);\n    transform: scale3d(1.2, 1.2, 1);\n  }\n\n  &:after {\n    background: $anx-primary-green;\n  }\n\n  &:visited {\n    color: $anx-primary-green;\n    text-decoration: none;\n  }\n\n  &:not(:disabled) {\n    cursor: pointer;\n\n    &:hover {\n      color: $anx-primary-green;\n      text-decoration: none;\n\n      &:before {\n        opacity: 1;\n        -webkit-transform: scale3d(1, 1, 1);\n        transform: scale3d(1, 1, 1);\n      }\n\n      &:after {\n        opacity: 0;\n        -webkit-transform: scale3d(0.8, 0.8, 1);\n        transform: scale3d(0.8, 0.8, 1);\n      }\n    }\n  }\n}\n\n/*btn-outline animated button*/\n.btn-outline {\n  color: $anx-primary-green !important;\n  border: 1px solid $anx-primary-green !important;\n  background-color: transparent;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n    border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n\n  &:before {\n    background-color: $anx-primary-green;\n    border: none !important;\n  }\n\n  &:after {\n    background: transparent !important;\n  }\n\n  &:visited {\n    color: white;\n    text-decoration: none;\n  }\n\n  &:hover {\n    color: white !important;\n    text-decoration: none;\n  }\n}\n</style>\n","<template>\n  <a class=\"anx-link\">\n    <slot />\n  </a>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxLink extends Vue {}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-link {\n  color: $anx-primary-green;\n  outline: none !important;\n  text-decoration: none;\n\n  &:hover {\n    color: $anx-primary-green;\n    cursor: pointer;\n    border-bottom: 1px solid $anx-primary-green;\n  }\n}\n</style>\n","<template>\n  <img v-bind:src=\"getImage()\" :style=\"cssProps\" class=\"anx-icon\" />\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Prop, Component } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxIcon extends Vue {\n  @Prop({ default: \"\" }) img!: string;\n  @Prop({ default: \"\" }) width!: string;\n\n  private getImage() {\n    let icon = \"\";\n    if (this.img == \"\") {\n      icon = \"anexia.svg\";\n    } else {\n      if (this.img.includes(\".svg\")) {\n        icon = this.img;\n      } else {\n        icon = this.img + \".svg\";\n      }\n    }\n    return require(\"../assets/icons/\" + icon);\n  }\n\n  get cssProps() {\n    return {\n      \"--icon-width\": this.width\n    };\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\nimg {\n  width: var(--icon-width);\n  flex-shrink: 0;\n}\n</style>\n","<template>\n  <div :class=\"`anx-title size-${size}`\">\n    <span>\n      <slot />\n    </span>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxContent extends Vue {\n  /** This is the size of the header (h1, h2, h3) */\n  @Prop({ default: \"h1\" }) size!: string;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-title {\n  text-transform: uppercase;\n  color: $anx-primary-blue;\n  margin-bottom: 20px;\n\n  &.size-h1 {\n    font-size: 28px;\n    font-weight: 600;\n  }\n\n  &.size-h2 {\n    font-size: 23px;\n    line-height: 27.6px;\n    font-weight: 600;\n  }\n\n  &.size-h3 {\n    font-size: 18px;\n    line-height: 24px;\n    font-weight: 600;\n    color: $anx-lightest-grey-dark;\n  }\n}\n</style>\n","<template>\n  <div\n    :class=\"\n      `anx-paragraph anx-paragraph-${size} ` + (hint !== null ? 'hint ' : '')\n    \"\n  >\n    <anx-title v-if=\"title !== null\" :size=\"size\" class=\"anx-paragraph-title\">\n      {{ title }}\n    </anx-title>\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxTitle from \"./AnxTitle.vue\";\n\n@Component({\n  components: {\n    AnxTitle\n  }\n})\nexport default class AnxParagraph extends Vue {\n  /** The title of the paragrapg */\n  @Prop({ default: null }) title!: string;\n\n  /** The size of the paragraph (h1, h2 or h3) */\n  @Prop({ default: \"h1\" }) size!: string;\n\n  /** The paragraph can also be displayed as hint */\n  @Prop({ default: null }) hint!: boolean;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-paragraph {\n  line-height: 24px;\n\n  p {\n    margin: 0;\n  }\n\n  &.anx-paragraph-h1 {\n    margin-bottom: 40px;\n  }\n\n  &.anx-paragraph-h2 {\n    margin-bottom: 30px;\n  }\n\n  &.anx-paragraph-h3 {\n    margin-bottom: 20px;\n  }\n\n  .anx-paragraph-title {\n    margin-bottom: unset;\n\n    &::after {\n      content: \"\\A\\2014\";\n      white-space: pre;\n    }\n  }\n\n  &.hint {\n    color: $anx-second-grey-light;\n    font-size: 12px;\n    line-height: 14px;\n  }\n}\n</style>\n","<template>\n  <div class=\"anx-card\">\n    <div class=\"anx-card-content d-flex\">\n      <anx-icon class=\"anx-card-icon\" :img=\"img\" />\n      <anx-paragraph :title=\"title\" size=\"h3\">\n        <p>\n          <slot />\n        </p>\n        <anx-link v-if=\"linkText\" :href=\"link\"> {{ linkText }}</anx-link>\n      </anx-paragraph>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxLink from \"./AnxLink.vue\";\nimport AnxIcon from \"./AnxIcon.vue\";\nimport AnxParagraph from \"./AnxParagraph.vue\";\n\n@Component({\n  components: {\n    AnxLink,\n    AnxIcon,\n    AnxParagraph\n  }\n})\nexport default class Card extends Vue {\n  /** This is the header for the card */\n  @Prop() title!: string;\n\n  /** This is the text for the link */\n  @Prop({ default: null }) linkText!: string;\n\n  /** This is the link for the card */\n  @Prop({ default: \"#\" }) link!: string;\n\n  /** The image of the card */\n  @Prop({ default: null }) img!: string;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-card {\n  margin-bottom: 20px;\n  border-radius: 0px !important;\n  border: 1px solid $anx-primary-grey-light;\n\n  .anx-card-content {\n    padding: 0 20px 0 20px;\n    margin-top: 24px;\n    margin-bottom: 17px;\n\n    .anx-card-icon {\n      margin-top: auto;\n      margin-bottom: auto;\n      margin-right: 20px;\n      height: 80px;\n      width: 80px;\n      @media screen and (max-width: 500px) {\n        display: none;\n        margin-right: 0;\n      }\n    }\n\n    .anx-paragraph {\n      margin-bottom: 0;\n\n      a {\n        text-transform: uppercase;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <!-- Checkbox with validation provider -->\n  <ValidationProvider\n    v-if=\"validation\"\n    v-slot=\"{ errors }\"\n    :name=\"name\"\n    rules=\"required:true\"\n  >\n    <div class=\"anx-checkbox\">\n      <label :for=\"name\">\n        <input\n          :id=\"name\"\n          :name=\"name\"\n          type=\"checkbox\"\n          v-validate=\"'required:true'\"\n          :value=\"name\"\n          v-model=\"checked\"\n          :class=\"errors && errors.length > 0 ? 'is-invalid' : ''\"\n          @change=\"$emit('input', { checked, name })\"\n        />\n        <div class=\"text\">{{ name }}</div>\n      </label>\n      <span class=\"error\">{{ errors[0] }}</span>\n    </div>\n  </ValidationProvider>\n  <!-- standard Checkbox-->\n  <div v-else class=\"anx-checkbox\">\n    <label :for=\"name\">\n      <input\n        :id=\"name\"\n        :name=\"name\"\n        type=\"checkbox\"\n        :value=\"name\"\n        v-model=\"checked\"\n        @change=\"$emit('input', { checked, name })\"\n      />\n      <div class=\"text\">{{ name }}</div>\n    </label>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport { ValidationProvider } from \"vee-validate\";\n\n@Component({\n  components: {\n    ValidationProvider\n  }\n})\nexport default class AnxCheckbox extends Vue {\n  /**with this property, a checkbox can be set */\n  /**Props\n   * name: the name of the input with type checkbox and the label text\n   */\n  @Prop() name!: string;\n  /**validation: is it set (true) then there are a default validation provider (check is_set/required) */\n  @Prop({ default: false }) validation!: boolean;\n\n  private checked = false;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-checkbox {\n  margin-bottom: $form-components-spacing;\n\n  label {\n    display: ruby-base;\n    margin: 0;\n    color: $anx-lightest-grey-dark !important;\n    font-size: 16px;\n  }\n\n  input {\n    height: 13px !important;\n    width: 13px !important;\n    padding: 2px !important;\n    border-color: $anx-primary-green !important;\n    border: 1px solid;\n    margin: 0px 10px 0px 0px !important;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    -o-appearance: none;\n    appearance: none;\n    content: \" \";\n    outline: none;\n\n    &[type=\"checkbox\"]::-ms-check {\n      display: none;\n      border-color: $anx-primary-green !important;\n      background: transparent;\n    }\n\n    &:checked {\n      color: #fff;\n      border-color: $anx-primary-green !important;\n      background: $anx-primary-green url(../assets/icons/check-white.svg)\n        no-repeat center;\n      border: 1px solid;\n    }\n\n    &:disabled {\n      border-color: $anx-second-grey-light !important;\n    }\n\n    &.is-invalid {\n      border-color: $anx-error !important;\n\n      ~ .text {\n        color: $anx-error;\n      }\n    }\n  }\n\n  .text {\n    display: inline-block;\n  }\n\n  span.error {\n    font-size: 12px;\n    color: $anx-error;\n    padding: 0;\n    white-space: nowrap;\n    display: block;\n  }\n}\n</style>\n","<template>\n  <div class=\"anx-container container\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxContainer extends Vue {}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-container {\n  max-width: 500px;\n}\n</style>\n","<template>\n  <div :class=\"'anx-content ' + (inverse !== null ? 'inversed-colors ' : '')\">\n    <anx-title v-if=\"title !== null\" :size=\"size\">\n      {{ title }}\n    </anx-title>\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxTitle from \"./AnxTitle.vue\";\n\n@Component({\n  components: {\n    AnxTitle\n  }\n})\nexport default class AnxContent extends Vue {\n  /** The title for the content */\n  @Prop({ default: null }) title!: string;\n\n  /** This is the size of the header (h1, h2, h3) */\n  @Prop({ default: \"h1\" }) size!: string;\n\n  /** If this property is set to true, the colors will be inversed (blue background and white font) */\n  @Prop({ default: null }) inverse!: boolean;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-content {\n  margin-bottom: 40px;\n  background-color: $anx-primary-white;\n  padding: 40px;\n\n  @media (max-width: $screen-md) {\n    padding: 20px;\n  }\n\n  &.inversed-colors {\n    background-color: transparent;\n    padding-left: 0 !important;\n    padding-right: 0 !important;\n    color: $anx-primary-white;\n\n    .anx-title {\n      color: $anx-primary-white;\n    }\n  }\n\n  div:last-child {\n    margin-bottom: 0;\n  }\n}\n</style>\n","<template>\n  <div class=\"anx-footer\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <hr />\n          <div class=\"anx-footer-elements\">\n            <anx-icon\n              class=\"anx-footer-logo\"\n              alt=\"anx-footer-logo\"\n              :img=\"img\"\n            />\n\n            <div class=\"anx-footer-right\">\n              <div class=\"anx-footer-text\">\n                <div class=\"anx-footer-text copyright\">\n                  2006 - {{ new Date().getFullYear() }} Anexia\n                  Internetdienstleistungs GmbH\n                </div>\n                <!--                    <a>impressum </a>| <a>kontak</a>-->\n                <a\n                  v-for=\"link in this.footerLinks\"\n                  :key=\"link.id\"\n                  :href=\"`${link.link}`\"\n                >\n                  {{ $t(link.text) }}\n                </a>\n              </div>\n            </div>\n          </div>\n          <anx-icon class=\"anx-footer-logo\" id=\"footer-img-mobile\" :img=\"img\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxIcon from \"./AnxIcon.vue\";\n\n@Component({ components: { AnxIcon } })\nexport default class AnxFooter extends Vue {\n  @Prop({ default: \"anexia-logo\" }) img!: string;\n\n  private footerLinks: Array<object> = [];\n  mounted() {\n    this.createFooterLinks();\n  }\n  private createFooterLinks() {\n    Object.keys(this.$i18n.t(\"uiplugin.footer.text\")).forEach(element => {\n      this.footerLinks.push({\n        text: \"uiplugin.footer.text.\" + element,\n        link: \"uiplugin.footer.link.\" + element\n      });\n    });\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../assets/scss/_variables.scss\";\n.anx-footer-logo {\n  width: 64px;\n\n  @media screen and (max-width: 500px) {\n    display: none;\n  }\n}\n#footer-img-mobile {\n  display: none;\n  @media screen and (max-width: 500px) {\n    margin-right: auto;\n    margin-left: auto;\n    display: inherit;\n    margin-bottom: 50px;\n  }\n}\n.anx-footer {\n  margin-left: auto;\n  margin-right: auto;\n  width: 500px;\n  display: flex;\n  height: 100px;\n  @media screen and (max-width: 500px) {\n    width: 100%;\n  }\n}\n.anx-footer-elements {\n  display: flex;\n\n  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n    /* IE10+ CSS styles go here */\n    flex-direction: column;\n    -ms-flex-direction: column;\n  }\n}\n.anx-footer-right {\n  text-align: right;\n  width: 100%;\n  @media screen and (max-width: 500px) {\n    margin-bottom: 20px;\n  }\n}\n.anx-footer-text {\n  @media screen and (max-width: 500px) {\n    display: block;\n    text-align: center;\n  }\n  color: $anx-primary-white;\n  &.copyright::before {\n    content: \"\\00A9\";\n  }\n  a {\n    color: $anx-primary-green;\n    text-decoration: none;\n    &:not(:last-of-type):after {\n      content: \" | \";\n    }\n    &:hover {\n      color: $anx-dark-green;\n      -webkit-transition: all 0.2s ease-in-out;\n      -moz-transition: all 0.2s ease-in-out;\n      -o-transition: all 0.2s ease-in-out;\n      transition: all 0.2s ease-in-out;\n    }\n  }\n}\nhr {\n  background-color: $anx-primary-blue;\n  height: 1px;\n  margin-top: 1rem;\n  margin-bottom: 20px;\n  border: 0;\n  box-sizing: inherit;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n}\n</style>\n","<template>\n  <ValidationObserver :ref=\"name\" v-slot=\"{ invalid }\">\n    <form :id=\"name\" class=\"anx-form\" @submit.prevent=\"checkValidation\">\n      <slot />\n      <anx-button\n        v-if=\"submitButton !== null\"\n        type=\"submit\"\n        :width=\"submitButton.width ? submitButton.width : '100%'\"\n        :text=\"submitButton.text\"\n        :disabled=\"submitButton.disabled && invalid\"\n      />\n    </form>\n  </ValidationObserver>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop, Emit } from \"vue-property-decorator\";\nimport { ValidationObserver, Validator } from \"vee-validate\";\nimport AnxButton from \"./AnxButton.vue\";\n\n@Component({\n  components: {\n    AnxButton,\n    ValidationObserver\n  }\n})\nexport default class AnxAlert extends Vue {\n  /** With this property, a submit button can be set */\n  /**\n   * Props\n   * text: The text of the button\n   * disabled: Whether or not the button is disabled on invalid input\n   * width: The width of the button, default is 100%\n   */\n  @Prop({ default: null }) submitButton!: Record<string, string>;\n\n  /** The name of the form. This is important when using several forms on one page */\n  @Prop({ default: \"anx-form\" }) name!: string;\n\n  /** Emit the submit event */\n  @Emit(\"submit\")\n  submit() {\n    return true;\n  }\n\n  /**\n   * This validates the form manually\n   * This is needed, cause the input fields are only validated after first input.\n   * If a field is required but has never had any input, the { valid } prop of the observer would be true.\n   */\n  private async checkValidation() {\n    const validator = (this.$refs[this.name] as unknown) as Validator;\n    if (await validator.validate()) {\n      this.submit();\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n</style>\n","<template>\n  <div class=\"anx-global\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\n\n/**\n * This component contains global styles for the ANX application\n * Every content has to be inside this component\n */\n@Component({})\nexport default class AnxGlobal extends Vue {}\n</script>\n\n<style lang=\"scss\">\n@import \"../assets/scss/fonts.scss\";\n@import \"../assets/scss/_variables.scss\";\n@import \"../assets/scss/bootstrap-grid.scss\";\nhtml {\n  body {\n    margin: 0px !important;\n    background-color: $anx-dark-blue;\n    color: $anx-lightest-grey-dark;\n    font-size: 16px;\n\n    .text-uppercase {\n      text-transform: uppercase;\n    }\n\n    span {\n      &.f-100 {\n        font-weight: 100;\n      }\n      &.f-200 {\n        font-weight: 200;\n      }\n      &.f-300 {\n        font-weight: 300;\n      }\n      &.f-400 {\n        font-weight: 400;\n      }\n      &.f-500 {\n        font-weight: 500;\n      }\n      &.f-600 {\n        font-weight: 600;\n      }\n      &.f-700 {\n        font-weight: 700;\n      }\n      &.f-800 {\n        font-weight: 800;\n      }\n      &.f-900 {\n        font-weight: 900;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <div>\n    <div class=\"language-switcher\">\n      <a\n        :class=\"$i18n.locale === 'de' ? 'selected' : 'not-selected'\"\n        @click=\"setLocale('de')\"\n      >\n        DE\n      </a>\n      /\n      <a\n        :class=\"$i18n.locale === 'en' ? 'selected' : 'not-selected'\"\n        @click=\"setLocale('en')\"\n      >\n        EN\n      </a>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component } from \"vue-property-decorator\";\nimport \"vue-i18n\";\n\n@Component({})\nexport default class I18nLangSwitcher extends Vue {\n  private setLocale(locale: string) {\n    this.$i18n.locale = locale;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.language-switcher {\n  color: $anx-primary-green;\n  a,\n  a:link,\n  a:visited,\n  a:focus {\n    cursor: pointer;\n    margin: 0px;\n    color: $anx-primary-white;\n  }\n  .selected {\n    cursor: pointer;\n    color: $anx-primary-white;\n    border-bottom: 1px solid $anx-primary-green;\n  }\n  a:hover {\n    color: $anx-primary-green;\n  }\n\n  .not-selected {\n    text-decoration: none;\n    color: $anx-primary-green;\n    cursor: pointer;\n  }\n}\n</style>\n","<template>\n  <div class=\"header\">\n    <div class=\"container\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"header-container d-flex\">\n            <div class=\"header-image\">\n              <anx-icon alt=\"anx-header-logo\" :img=\"img\" />\n            </div>\n            <div class=\"header-language-nav\" v-if=\"$i18n\">\n              <div v-if=\"!menus\">\n                <I18nLangSwitcher />\n              </div>\n            </div>\n          </div>\n          <hr />\n          <div class=\"header-nav-menu\" v-if=\"menus\">\n            <div class=\"menu-text left\">\n              <!--add DTO -->\n              <a v-for=\"menu in menus\" :key=\"menu.id\" :href=\"`${menu.link}`\">\n                {{ menu.menu }}\n              </a>\n            </div>\n            <div class=\"menu-text right\" v-if=\"$i18n\">\n              <div v-if=\"menus\">\n                <I18nLangSwitcher />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxIcon from \"./AnxIcon.vue\";\nimport I18nLangSwitcher from \"./I18nLangSwitcher.vue\";\n\n@Component({\n  components: { I18nLangSwitcher, AnxIcon }\n})\nexport default class AnxHeader extends Vue {\n  @Prop({ default: \"anexia-logo\" }) img!: string;\n  @Prop({ default: null }) menus!: Array<object>;\n\n  private mounted() {\n    const hmenu = document.querySelectorAll(\n      \".header-nav-menu > .menu-text.left > a\"\n    );\n\n    let path = window.location.pathname;\n    hmenu.forEach(el => {\n      if (path[path.length - 1] !== \"/\") {\n        path += \"/\";\n      }\n      if ((el as HTMLElement).getAttribute(\"href\") === path) {\n        el.classList.add(\"active\");\n      }\n    });\n\n    return;\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n@import \"../assets/scss/_variables.scss\";\n\nhr {\n  background-color: $anx-primary-blue;\n  height: 1px;\n  margin-top: 1rem;\n  margin-bottom: 20px;\n  border: 0;\n  box-sizing: inherit;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n}\n.header-container {\n  margin-top: 30px;\n  margin-bottom: 10px;\n  .header-language-nav {\n    width: 100%;\n    text-align: right;\n    margin: auto 0 auto 0;\n    color: $anx-primary-white;\n  }\n}\n\n.header {\n  margin-left: auto;\n  margin-right: auto;\n  width: 500px;\n  display: flex;\n  @media screen and (max-width: 500px) {\n    width: 100%;\n  }\n}\nimg {\n  height: 45px;\n}\na {\n  color: $anx-primary-green;\n  text-decoration: none;\n  &.active {\n    color: $anx-primary-white;\n    border-bottom: 1px solid $anx-primary-green;\n  }\n}\na:hover {\n  text-decoration: none;\n  color: $anx-primary-green;\n}\n\n.header-nav-menu {\n  display: table;\n  // padding-top: 17px;\n  margin-bottom: 35px;\n  width: 100%;\n  @media screen and (max-width: 500px) {\n    display: flex;\n    flex-direction: column-reverse;\n    padding-top: none;\n  }\n  .menu-text {\n    a {\n      margin-right: 20px;\n    }\n    a:last-of-type {\n      margin-right: 0;\n    }\n    &.left {\n      float: left;\n      padding-top: 0;\n      @media screen and (max-width: 500px) {\n      }\n    }\n    &.right {\n      float: right;\n      padding-top: 0;\n      .active {\n        color: $anx-primary-green;\n      }\n      @media screen and (max-width: 500px) {\n        float: left;\n        margin-bottom: 20px;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <!--The readonly Input field -->\n  <div\n    v-if=\"readonly !== false\"\n    class=\"anx-input\"\n    :class=\"{ filled: filled }\"\n    :style=\"cssProps\"\n  >\n    <input\n      :id=\"id\"\n      v-model=\"updateInputField\"\n      :data-vv-as=\"name\"\n      type=\"text\"\n      :name=\"name\"\n      hide-details=\"true\"\n      @blur=\"inputBlur\"\n      :class=\"errors && errors.length > 0 ? 'is-invalid' : ''\"\n      readonly=\"readonly !== false ? true\"\n    />\n    <label :for=\"id\">\n      {{ label }}\n    </label>\n  </div>\n  <!-- the normal input field with validation provider -->\n  <ValidationProvider v-else v-slot=\"{ errors }\" :name=\"name\" :rules=\"rules\">\n    <div\n      class=\"anx-input\"\n      :class=\"{ active: active, filled: filled }\"\n      @click=\"active = true\"\n      :style=\"cssProps\"\n    >\n      <input\n        :id=\"id\"\n        v-model=\"updateInputField\"\n        v-validate=\"rules\"\n        :data-vv-as=\"name\"\n        type=\"text\"\n        :name=\"name\"\n        hide-details=\"true\"\n        @blur=\"inputBlur\"\n        :class=\"errors && errors.length > 0 ? 'is-invalid' : ''\"\n        @input=\"$emit('input', updateInputField)\"\n      />\n      <label :for=\"id\" :class=\"errors && errors.length > 0 ? 'error' : ''\">\n        {{ label }}\n      </label>\n      <span v-if=\"errors.length > 0\" class=\"error\">{{ errors[0] }}</span>\n      <span\n        v-else-if=\"\n          errors.length === 0 && assistiveText && assistiveText.length > 0\n        \"\n        class=\"assistiv\"\n        >{{ assistiveText }}</span\n      >\n    </div>\n  </ValidationProvider>\n</template>\n<script lang=\"ts\">\nimport { Vue, Component, Prop, Watch } from \"vue-property-decorator\";\n\nimport { ValidationProvider } from \"vee-validate\";\n\n@Component({\n  components: {\n    ValidationProvider\n  }\n})\nexport default class AnxInput extends Vue {\n  /**With this property, a anx-input can be set and designed */\n  /**Props\n   * name: is the name of the input-field\n   */\n  @Prop() name!: string;\n  /**id: the id of the input field */\n  @Prop({ default: \"input-text-field\" }) id!: string;\n  /**label: the label-text of the input field */\n  @Prop() label!: string;\n  /** rules: needed for validation\n   * this are the rules, which will be used for teh input validation\n   */\n  @Prop() rules!: string;\n  /**width: the width of the input-field */\n  @Prop({ default: \"100%\" }) width!: string;\n  /**assistiveText: the hint-text under the input-field\n   * it will only be showed, when there are no errors (validation)\n   */\n  @Prop() assistiveText!: string;\n  /**readonly: the readonly attribute for the input-field.\n   * Is this prop is set (true) there will be now validation and you\n   * can't change the value. But the animation will be execute, when the\n   * value is set.\n   */\n  @Prop({ default: false }) readonly!: boolean;\n  /**vallue: only needed if readonly\n   * is the value who will be show as input\n   */\n  @Prop({ default: \"\" }) value!: string;\n\n  private active = false;\n  private filled = false;\n  public updateInputField = \"\";\n\n  /**Watch the updateInputField variable. When it changed, then it check if\n   * the input field should be active or not (User is typing)\n   */\n  @Watch(\"updateInputField\")\n  nameChanged(newVal: string) {\n    if (newVal.length) {\n      this.active = true;\n    }\n  }\n  /**FOR READONLY!\n   * Watch the attribute/prop value. When the value change, then it set the updateInputField\n   * variabel with the new value (need to be pass to the parent) and set the input-field to filled.\n   */\n  @Watch(\"value\")\n  valueChanged() {\n    if (this.readonly !== false) {\n      this.updateInputField = this.value;\n      this.isFilled();\n    }\n  }\n\n  /**After creation the value will be save in the updateInputField and check if it has the\n   * state filled.\n   */\n  private mounted() {\n    this.updateInputField = this.value;\n    this.isFilled();\n  }\n\n  get cssProps() {\n    return {\n      \"--input-width\": this.width\n    };\n  }\n\n  /** Check if the input-field is filled, Set class filled. */\n  protected isFilled() {\n    if (!this.updateInputField.length) {\n      this.filled = false;\n    } else {\n      this.filled = true;\n    }\n  }\n\n  /**When the User click in and out of the field, the state active will be set and\n   * the state filled will be checked.\n   */\n  protected inputBlur() {\n    this.active = !this.active;\n    this.isFilled();\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-input {\n  color: $anx-lightest-grey-dark;\n  display: block;\n  font-family: $anx-font-family;\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 25.6px;\n  max-width: 100%;\n  padding-top: 20px;\n  position: relative;\n  width: var(--input-width);\n  margin-bottom: $form-components-spacing;\n\n  input {\n    outline: none;\n  }\n}\n\n.anx-input label {\n  bottom: 0;\n  color: $anx-lightest-grey-dark;\n  cursor: default;\n  display: block;\n  font-family: $anx-font-family;\n  font-size: 16px;\n  font-weight: 400;\n  height: 45px;\n  left: 0;\n  line-height: 25.6px;\n  margin-bottom: 5px;\n  overflow: hidden;\n  pointer-events: none;\n  right: 0;\n  text-align: left;\n  top: 24px;\n  white-space: nowrap;\n  width: 100%;\n}\n.anx-input label,\n.anx-input label:after {\n  position: absolute;\n  transition-duration: 0.2s;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n}\n.anx-input label:after {\n  background-color: $anx-primary-green;\n  bottom: 15px;\n  content: \"\";\n  height: 1px;\n  left: 45%;\n  visibility: hidden;\n  width: 10px;\n}\n.anx-input input {\n  background-color: transparent;\n  border-radius: 0;\n  border: none;\n  border-bottom: 1px solid $anx-second-grey-light;\n  color: $anx-lightest-grey-dark;\n  cursor: text;\n  display: block;\n  box-sizing: border-box;\n  font-family: $anx-font-family;\n  font-size: 16px;\n  font-stretch: 100%;\n  font-style: normal;\n  font-weight: 400;\n  height: 34px !important;\n  line-height: 25.6px;\n  margin: 0;\n  padding: 6px 0;\n  text-align: left;\n  text-indent: 0;\n  text-rendering: auto;\n  text-shadow: none;\n  text-size-adjust: 100%;\n  text-transform: none;\n  width: 100%;\n  word-spacing: 0;\n  writing-mode: horizontal-tb;\n  -webkit-appearance: none;\n  -webkit-rtl-ordering: logical;\n\n  &:read-only {\n    border: none !important;\n  }\n}\n\n.anx-input.active label,\n.anx-input.filled label {\n  color: $anx-primary-green;\n  font-size: 12px;\n  height: 65px;\n  line-height: 19.2px;\n  top: 4px;\n  visibility: visible;\n}\n\n.anx-input.active label:after {\n  background-color: $anx-primary-green;\n  left: 0;\n  visibility: visible;\n  width: 100%;\n}\n.anx-input.active input {\n  background-color: transparent;\n  outline: 0 none $anx-lightest-grey-dark;\n}\n\n.anx-input > input.is-invalid {\n  border-bottom: 1px solid $anx-error !important;\n\n  & ~ label {\n    color: $anx-error;\n  }\n\n  &:read-only {\n    border: none !important;\n  }\n}\n\nlabel.error {\n  color: $anx-error !important;\n}\nlabel.error::after {\n  background-color: $anx-error !important;\n}\n\nspan.error {\n  font-size: 12px;\n  color: $anx-error;\n  padding: 0;\n  white-space: nowrap;\n}\n\nspan.assistiv {\n  font-size: 12px;\n  color: $anx-primary-grey-light;\n  padding: 0;\n  white-space: nowrap;\n}\n</style>\n","<template>\n  <div id=\"modal\" class=\"modal anx-modal\">\n    <div :class=\"'modal-dialog modal-dialog-scrollable'\">\n      <div class=\"modal-content anx-modal-content\">\n        <div class=\"modal-header  anx-modal-header\">\n          <button\n            type=\"button\"\n            class=\"close\"\n            data-dismiss=\"modal\"\n            aria-label=\"Close\"\n            @click=\"$emit('close')\"\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n          <div class=\"h2 modal-title heading\">\n            {{ title }}\n          </div>\n          <div class=\"small-line h2\">\n            &mdash;\n          </div>\n        </div>\n        <div class=\"modal-body  anx-modal-body\">\n          <slot />\n        </div>\n        <div class=\"modal-footer  anx-modal-footer\">\n          <anx-button\n            :text=\"this.$i18n.t('uiplugin.modal.closeButton')\"\n            v-if=\"hasCloseButton\"\n            @submit=\"$emit('close')\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxButton from \"./AnxButton.vue\";\n@Component({\n  components: {\n    AnxButton\n  }\n})\nexport default class AnxModal extends Vue {\n  @Prop({ default: \"TITLE\" }) title!: string;\n\n  @Prop({ default: true }) hasCloseButton!: boolean;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-button {\n  position: relative !important;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1050;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  outline: 0;\n}\n.anx-modal {\n  .modal-dialog {\n    background-color: $anx-primary-white;\n    width: 500px;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 178px;\n  }\n  .anx-modal-content {\n    position: relative;\n    border-radius: 0px;\n    border: none !important;\n    .anx-modal-header {\n      border-radius: 0px;\n      color: $anx-primary-white;\n    }\n    .anx-modal-body {\n      border-radius: 0px;\n    }\n    .anx-modal-footer {\n      border-radius: 0px;\n\n      .button {\n        margin-right: 0px !important;\n\n        &.center {\n          margin: auto !important;\n        }\n      }\n    }\n  }\n}\n\n.modal {\n  display: inline;\n  background: $anx-black-transparet;\n\n  .modal-header {\n    background-color: $anx-primary-blue;\n    padding: 25px 40px 15px 40px;\n    height: 94px;\n    border-bottom: 0px;\n    display: block;\n    text-align: left;\n\n    @media screen and (max-width: 500px) {\n      padding: 30px 33px 10px 20px;\n    }\n\n    .modal-title {\n      text-transform: uppercase;\n      font-size: 20px;\n    }\n\n    button {\n      background-color: transparent;\n      border: none;\n      position: absolute;\n      color: #fff;\n      text-shadow: none;\n      opacity: 1;\n      font-weight: ligther;\n      max-width: 1px;\n      font-size: medium;\n      right: 0;\n      top: 0;\n    }\n\n    .close {\n      cursor: pointer;\n      padding: 0 2rem;\n      margin: 0;\n      font-size: 34px;\n      line-height: 42px;\n    }\n\n    .small-line {\n      font-size: 20px;\n    }\n\n    span {\n      color: white;\n      font-size: 34px;\n      line-height: 42px;\n    }\n  }\n\n  .modal-body {\n    margin: 40px;\n    padding: 0 !important;\n\n    @media screen and (max-width: 500px) {\n      margin: 2.5rem 1.25rem 2.5rem 1.25rem; // 40px 20px 40px 20px\n    }\n  }\n\n  .modal-footer {\n    border: none;\n    padding: 0 2.5rem 2.5rem 2.5rem;\n    display: flex;\n    justify-content: center;\n    @media screen and (max-width: 500px) {\n      padding: 0 1.25rem 2.5rem 1.25rem; // 0px 20px 40px 20px\n\n      button {\n        margin: auto;\n      }\n\n      div {\n        width: 100%;\n        padding-bottom: 2.2rem; //35.2px + Überstand beim Div\n      }\n    }\n\n    button {\n      position: inherit;\n    }\n  }\n}\n</style>\n","<template>\n  <div id=\"testanx\" class=\"anx-readonly\" @click=\"copy($event)\">\n    <div :class=\"'inner-text ' + (bold !== null ? 'bold ' : '')\">\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxReadonly extends Vue {\n  /** This is the id of the alert */\n  @Prop({ default: \"anx-alert\" }) name!: string;\n\n  /** Should the text be selcted and copied to the clipboard on click? */\n  @Prop({ default: null }) copyOnClick!: boolean;\n\n  /** Should the text be bold? */\n  @Prop({ default: null }) bold!: boolean;\n\n  /** Select and copy the text of the area */\n  private copy(event: Event) {\n    if (this.copyOnClick !== null) {\n      const range = document.createRange();\n      range.selectNode(event.target as HTMLElement);\n\n      const selection = window.getSelection();\n      if (selection) {\n        selection.removeAllRanges();\n        selection.addRange(range);\n      }\n\n      document.execCommand(\"copy\");\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-readonly {\n  background-color: $anx-table-row-background;\n  border: 1px solid $anx-primary-grey-light;\n  margin: 30px 0;\n  width: 100%;\n\n  .inner-text {\n    line-height: 16px;\n    padding: 16px;\n    color: $anx-lightest-grey-dark;\n\n    &.bold {\n      font-weight: 800;\n    }\n  }\n}\n</style>\n","<template>\n  <!-- if validation=true then this will be rendered, anx-select + validation-provider -->\n  <ValidationProvider\n    v-if=\"validation\"\n    :name=\"label\"\n    rules=\"excluded:null\"\n    v-slot=\"{ errors }\"\n  >\n    <div\n      class=\"anx-select\"\n      :class=\"{ is_invalid: error.length > 0 || errors.length > 0 }\"\n      :style=\"cssProps\"\n    >\n      <label :for=\"id + '1'\"> {{ label }}</label>\n      <select\n        class=\"select-original\"\n        :id=\"id + '1'\"\n        :name=\"id\"\n        v-model=\"selected\"\n      >\n        <option\n          v-for=\"option in options\"\n          :key=\"option.value\"\n          :value=\"option.value\"\n        >\n          {{ option.text }}</option\n        >\n      </select>\n      <div class=\"anx-select-div\" @click=\"show = !show\">\n        {{ selectedText }}\n      </div>\n      <ul class=\"anx-select-options\" :class=\"{ show: show }\">\n        <li\n          v-for=\"option in options\"\n          :key=\"option.value\"\n          :rel=\"option.value\"\n          :class=\"{ active: selected === option.value }\"\n          @click=\"select(option)\"\n        >\n          {{ option.text }}\n        </li>\n      </ul>\n      <span v-if=\"error.length > 0\" class=\"error\">{{ error[0] }}</span>\n      <span v-else class=\"error\">{{ errors[0] }}</span>\n    </div>\n  </ValidationProvider>\n  <!-- if validation=false then this will be rendered,s simple anx-select -->\n  <div v-else class=\"anx-select\" :style=\"cssProps\">\n    <label :for=\"id + '1'\"> {{ label }}</label>\n    <select\n      class=\"select-original\"\n      :id=\"id + '1'\"\n      :name=\"id\"\n      v-model=\"selected\"\n    >\n      <option\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :value=\"option.value\"\n      >\n        {{ option.text }}</option\n      >\n    </select>\n    <div class=\"anx-select-div\" @click=\"show = !show\">\n      {{ selectedText }}\n    </div>\n    <ul class=\"anx-select-options\" :class=\"{ show: show }\">\n      <li\n        v-for=\"option in options\"\n        :key=\"option.value\"\n        :rel=\"option.value\"\n        :class=\"{ active: selected === option.value }\"\n        @click=\"select(option)\"\n      >\n        {{ option.text }}\n      </li>\n    </ul>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { Vue, Component, Prop, Watch } from \"vue-property-decorator\";\nimport { ValidationProvider } from \"vee-validate\";\n\n@Component({\n  components: {\n    ValidationProvider\n  }\n})\nexport default class AnxSelect extends Vue {\n  /** With this property, a anx-select can be set */\n  /**Props:\n   * id: the id and name of the anx-select, important when there are more then one*/\n  @Prop({ default: \"anx-select-choice\" }) id!: string;\n  /**label: the text for the label, is also the name for the field in the error-message\n   */\n  @Prop({ default: \"Auswahl treffen\" }) label!: string;\n  /**options: this are the options for the select.\n   * This is a Array<{ value: string; text: string }>\n   * value: the value of the options and the value who will be passed to the parent\n   * text: the text who will be show in the application as label/text\n   * You can add a default/optional placeholder like \"please choose one option\" via {value: \"null\", text: \"please choose one option\"}\n   * The value for a placeholder must be \"null\" (important for the validation)\n   */\n  @Prop({\n    default: function() {\n      return [\n        { value: \"null\", text: \"Auswahl treffen\" },\n        { value: \"Auswahl 1\", text: \"Auswahl 1\" },\n        { value: \"Auswahl 2\", text: \"Auswahl 2\" },\n        { value: \"Auswahl 3\", text: \"Auswahl 3\" },\n        { value: \"Auswahl 4\", text: \"Auswahl 4\" }\n      ];\n    }\n  })\n  options!: Array<{ value: string; text: string }>;\n  /**width: the width for the eternaly anx-select */\n  @Prop({ default: \"100%\" }) width!: string;\n  /**validation: When this is set to true, there will be a validation-provider */\n  @Prop({ default: false }) validation!: boolean;\n\n  private selected = this.options[0].value;\n  private selectedText = this.options[0].text;\n  private show = false;\n  private error: string[] = [];\n\n  get cssProps() {\n    return {\n      width: this.width\n    };\n  }\n\n  /**\n   * Watch the selected variable. When selected is changed, the new value will be verify.\n   * option \"immediate:true\" means, it will be execute before mounted\n   * (this is important, for the validation observer)\n   */\n  @Watch(\"selected\", { immediate: false })\n  async onSelectedChanged(val: string) {\n    if (val && this.validation) {\n      await this.verify(val);\n    }\n  }\n\n  /**\n   * Verfiy the selected value and generate the error-message for the custom select.\n   */\n  private async verify(value: string) {\n    const { errors } = await this.$validator.verify(value, \"excluded:null\", {\n      name: this.label\n    });\n    this.error = errors;\n  }\n\n  /**\n   * Reset the error, because after mount it shouldn't show the error message\n   */\n  public mounted() {\n    this.error = [];\n  }\n\n  /**\n   * Set the variable with the selcted option and emit the input-event\n   */\n  public select(option: { value: string; text: string }) {\n    this.selected = option.value;\n    this.selectedText = option.text;\n    this.show = false;\n    this.$emit(\"input\", this.selected);\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.show {\n  display: block !important;\n}\n\n.anx-select {\n  font-family: $anx-font-family;\n  cursor: pointer;\n  display: inline-block;\n  position: relative;\n  width: var(--select-width);\n  color: $anx-lightest-grey-dark;\n  height: 25px;\n  margin-bottom: $form-components-spacing;\n  font-size: 16px;\n\n  &.is_invalid {\n    label {\n      color: $anx-error;\n    }\n    .anx-select-div {\n      color: $anx-error;\n      &:after {\n        background-image: url(../assets/icons/arrow-red-bottom.svg);\n      }\n    }\n  }\n\n  span.error {\n    display: block !important;\n    opacity: 1;\n    font-size: 12px;\n    color: $anx-error;\n    padding: 0;\n    white-space: nowrap;\n    top: 12px;\n    position: relative;\n  }\n}\n\n.anx-select .select-original {\n  display: none;\n  visibility: hidden;\n  opacity: 0;\n}\n\n.anx-select .anx-select-div {\n  color: $anx-primary-green;\n  border-bottom: 1px solid $anx-second-grey-light;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: -2px;\n  left: 0;\n  background-color: transparent;\n  -moz-transition: all 0.2s ease-in;\n  -o-transition: all 0.2s ease-in;\n  -webkit-transition: all 0.2s ease-in;\n  transition: all 0.2s ease-in;\n  text-align: right;\n  padding: 0 18px;\n  width: var(--select-width);\n}\n.anx-select .anx-select-div:after {\n  background-position: 0 0;\n  background-image: url(../assets/icons/arrow-green-bottom.svg);\n  width: 12px;\n  height: 11px;\n  content: \"\";\n  background-repeat: no-repeat;\n  position: absolute;\n  right: 0;\n  top: 4px;\n}\n.anx-select .anx-select-div:hover {\n  background-color: transparent;\n}\n.anx-select .anx-select-options {\n  display: none;\n  position: absolute;\n  top: 108%;\n  right: 0;\n  left: 0;\n  z-index: 999;\n  margin: 0 0 0 0;\n  padding: 0;\n  list-style: none;\n  background-color: #fff;\n  border: 1px solid $anx-second-grey-light;\n  border-top: none;\n  width: var(--select-width);\n}\n.anx-select .anx-select-options li {\n  text-align: right;\n  padding-right: 18px;\n  padding-top: 5px;\n  margin: 0;\n  -moz-transition: all 0.15s ease-in;\n  -o-transition: all 0.15s ease-in;\n  -webkit-transition: all 0.15s ease-in;\n  transition: all 0.15s ease-in;\n  position: relative;\n  height: 25px;\n}\n.anx-select .anx-select-options li.active:before {\n  content: \"\";\n  width: 16px;\n  height: 16px;\n  min-width: 16px;\n  background-image: url(../assets/icons/check-green.svg);\n  background-repeat: no-repeat;\n  position: absolute;\n  top: 5px;\n  margin-left: -20px;\n  background-position: 50%;\n}\n.anx-select .anx-select-options li:hover {\n  color: #fff;\n  background: $anx-primary-green;\n}\n</style>\n","<template>\n  <div v-if=\"scrollable\" class=\"anx-table-container\">\n    <div\n      class=\"anx-table-container-scrollable\"\n      :style=\"height !== null ? `height: ${height};` : ''\"\n    >\n      <slot />\n    </div>\n    <div v-if=\"scrollable !== null\" class=\"scroll-shadow\" />\n  </div>\n  <div class=\"anx-table-container\" v-else>\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxTable extends Vue {\n  /** Whether the table should be scrollable or not */\n  @Prop({ default: false }) scrollable!: boolean;\n\n  @Prop({ default: null }) height!: string;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-table-container {\n  position: relative;\n  margin-bottom: 40px;\n\n  .anx-table-container-scrollable {\n    overflow-y: auto;\n  }\n\n  .scroll-shadow {\n    position: absolute;\n    bottom: 0;\n    z-index: 10;\n    width: 100%;\n    height: 9px;\n    background: transparent\n      linear-gradient(180deg, transparent, rgba(0, 0, 0, 0.1)) 0 0 no-repeat\n      padding-box;\n  }\n}\n</style>\n","<template>\n  <tr class=\"anx-table-row\">\n    <slot>\n      <td v-for=\"(content, name) in item\" :key=\"name\">\n        {{ content }}\n      </td>\n    </slot>\n  </tr>\n</template>\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxTableRow extends Vue {\n  /** The columns for the row */\n  @Prop({ default: {} }) item!: Record<string, string>;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-table-row {\n  height: 40px;\n}\n</style>\n","<template>\n  <td class=\"anx-table-col\">\n    <slot>\n      {{ content }}\n    </slot>\n  </td>\n</template>\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\n\n@Component({})\nexport default class AnxTableCol extends Vue {\n  /** The content for the column */\n  @Prop({ default: \"\" }) content!: string;\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-table-col {\n  padding: 0.438rem 0.5rem 0.438rem 0.5rem;\n  padding-left: 8px;\n  font-size: 16px;\n  vertical-align: middle;\n\n  img {\n    max-height: 20px;\n  }\n}\n</style>\n","<template>\n  <anx-table-container\n    :scrollable=\"scrollable !== null ? true : false\"\n    :height=\"height !== null ? height : 'auto'\"\n  >\n    <table\n      :class=\"\n        'anx-table ' +\n          (stripped !== null ? 'anx-table-striped ' : '') +\n          (bordered !== null ? 'anx-table-bordered ' : '') +\n          (scrollable !== null ? 'anx-table-scrollable ' : '') +\n          (hover !== null ? 'anx-table-hover ' : '')\n      \"\n    >\n      <thead :class=\"uppercaseTitle !== null ? 'text-uppercase' : ''\">\n        <tr>\n          <th\n            v-for=\"(item, index) in items[0]\"\n            :key=\"index\"\n            scope=\"col\"\n            :width=\"getWidthForColumn(index)\"\n          >\n            {{ camelCaseToText(index) }}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <anx-table-row v-for=\"(item, i) in items\" :key=\"i\" :item=\"item\">\n          <anx-table-col v-for=\"(content, name) in item\" :key=\"name\">\n            <slot :name=\"`${name}${i}`\" v-bind:content=\"content\">\n              {{ content }}\n            </slot>\n          </anx-table-col>\n        </anx-table-row>\n      </tbody>\n    </table>\n  </anx-table-container>\n</template>\n\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport AnxTableContainer from \"./AnxTableContainer.vue\";\nimport AnxTableRow from \"./AnxTableRow.vue\";\nimport AnxTableCol from \"./AnxTableCol.vue\";\n\n@Component({\n  components: {\n    AnxTableContainer,\n    AnxTableRow,\n    AnxTableCol\n  }\n})\nexport default class AnxTable extends Vue {\n  /** Whether the table should be scrollable or not */\n  @Prop({ default: null }) scrollable!: boolean;\n\n  /** Wheter the table is stripped or not */\n  @Prop({ default: null }) stripped!: boolean;\n\n  /** Wheter the table is bordered or not */\n  @Prop({ default: null }) bordered!: boolean;\n\n  /** Wheter the table is bordered or not */\n  @Prop({ default: null }) hover!: boolean;\n\n  /** Wheter the table is bordered or not */\n  @Prop({ default: null }) height!: string;\n\n  /** Whether to display the header columns in uppercase or not */\n  @Prop({ default: null }) uppercaseTitle!: boolean;\n\n  /** The items for the table */\n  @Prop({ default: [] }) items!: Array<object>;\n\n  /** The widths for all the colums, this has to be an object. Example: { age: '100px' } to make the width of the column named age 100 px */\n  @Prop() widths!: Record<string, string>;\n\n  /** Searches if the width for a specific column is set and returns it */\n  private getWidthForColumn(index: string): string {\n    if (this.widths && index in this.widths) {\n      return this.widths[index];\n    }\n    return \"auto\";\n  }\n\n  /** Converts camelCase to Text */\n  private camelCaseToText(camelCase: string) {\n    return camelCase.replace(/([A-Z])/g, \" $1\").replace(/^./, function(str) {\n      return str.toUpperCase();\n    });\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-table {\n  color: $anx-primary-grey-dark !important;\n  border-collapse: collapse;\n  text-align: left;\n  width: 100%;\n  border: none;\n\n  thead {\n    background-color: $anx-table-header-background;\n    tr {\n      th {\n        padding: 0.5rem 0.5rem 0.438rem 0.5rem;\n      }\n    }\n  }\n\n  &.anx-table-bordered {\n    border: 1px solid $anx-table-border !important;\n\n    thead {\n      tr {\n        th {\n          border: 1px solid $anx-table-border !important;\n          border-bottom: 2px solid $anx-table-border !important;\n        }\n      }\n    }\n  }\n\n  &.anx-table-scrollable {\n    overflow-y: auto;\n  }\n}\n\n.scroll-shadow {\n  position: absolute;\n  bottom: 0;\n  z-index: 10;\n  width: 100%;\n  height: 9px;\n  background: transparent\n    linear-gradient(180deg, transparent, rgba(0, 0, 0, 0.1)) 0 0 no-repeat\n    padding-box;\n}\n</style>\n\n<!-- This style is for the table rows (in the child). This is why the style is not scoped -->\n<style lang=\"scss\">\n@import \"../assets/scss/_variables.scss\";\n\n.anx-table {\n  &.anx-table-bordered {\n    tbody {\n      tr {\n        border: 1px solid $anx-table-border !important;\n        td {\n          border: 1px solid $anx-table-border !important;\n        }\n      }\n    }\n  }\n\n  &.anx-table-striped {\n    tbody {\n      tr:nth-of-type(odd) {\n        background-color: $anx-table-row-background !important;\n      }\n    }\n  }\n\n  &.anx-table-hover {\n    tbody {\n      tr:hover {\n        background-color: $anx-table-row-hover !important;\n      }\n    }\n  }\n}\n</style>\n","<template>\n  <!-- textarea with validationn-provider -->\n  <ValidationProvider\n    v-if=\"validation\"\n    v-slot=\"{ errors }\"\n    name=\"textarea\"\n    :rules=\"rules\"\n  >\n    <div\n      :class=\"\n        errors && errors.length > 0 ? 'anx-textarea is-invalid' : 'anx-textarea'\n      \"\n      :style=\"cssProps\"\n    >\n      <textarea\n        :id=\"id\"\n        :name=\"id\"\n        :rows=\"rows\"\n        :disabled=\"disabled\"\n        v-validate=\"rules\"\n        v-model=\"message\"\n        :class=\"{ filled: message.length >= 1 }\"\n        @input=\"$emit('input', message)\"\n      />\n      <label id=\"textarea-label\" :for=\"id\">{{ label }}</label>\n      <span class=\"error\">{{ errors[0] }}</span>\n    </div>\n  </ValidationProvider>\n  <!-- standard textarea without validation-provider -->\n  <div v-else class=\"anx-textarea\" :style=\"cssProps\">\n    <textarea\n      :id=\"id\"\n      :name=\"id\"\n      :rows=\"rows\"\n      :disabled=\"disabled\"\n      v-validate=\"'required'\"\n      v-model=\"message\"\n      :class=\"{ filled: message.length >= 1 }\"\n      @input=\"$emit('input', message)\"\n    />\n    <label id=\"textarea-label\" :for=\"id\">{{ label }}</label>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { Vue, Component, Prop } from \"vue-property-decorator\";\nimport { ValidationProvider } from \"vee-validate\";\n\n@Component({\n  components: {\n    ValidationProvider\n  }\n})\nexport default class AnxTextarea extends Vue {\n  /** With this property, a textarea can be set */\n  /**Props\n   * id: the id and the name of the textarea\n   */\n  @Prop({ default: \"anx-textarea\" }) id!: string;\n  /**label: the label text for the textarea */\n  @Prop({ default: \"Additional Text\" }) label!: string;\n  /**rows: the number of rows for the textarea */\n  @Prop({ default: \"4\" }) rows!: string;\n  /**disabled: set the diasbled attribute of the textarea.\n   * When the textarea should be diabled you must set it in most cases with this prop\n   */\n  @Prop({ default: false }) disabled!: boolean;\n  /**width: the width of the textarea */\n  @Prop({ default: \"100%\" }) width!: string;\n  /**validation: is it set (true) then there will be validation-provider */\n  @Prop({ default: false }) validation!: boolean;\n  /**rules: the rules for the validation. default is required */\n  @Prop({ default: \"required\" }) rules!: string;\n\n  private message = \"\";\n\n  get cssProps() {\n    return {\n      \"--textarea-width\": this.width\n    };\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../assets/scss/_variables.scss\";\n\n.anx-textarea {\n  font-family: $anx-font-family;\n  width: var(--textarea-width);\n  display: block;\n  position: relative;\n  padding-top: 9px;\n  margin-bottom: 30px;\n\n  @media only screen and (width: 1125px), only screen and (width: 1200px) {\n    display: inline-block !important;\n  }\n\n  &.is-invalid > textarea,\n  &.is-invalid > textarea:focus {\n    border: 1px solid $anx-error;\n    ~ label {\n      color: $anx-error !important;\n    }\n  }\n}\n.anx-textarea textarea {\n  width: var(--textarea-width);\n  padding: 20px 17px 20px 17px;\n  border: 1px solid $anx-second-grey-light;\n  color: $anx-lightest-grey-dark !important;\n  font-family: $anx-font-family;\n  font-size: 16px;\n  resize: vertical;\n  overflow: auto;\n\n  &:focus,\n  &.filled {\n    border: 1px solid #77bc1f;\n    outline: 0;\n\n    + label {\n      color: $anx-primary-green !important;\n      margin-left: 15px;\n      background-color: #fff;\n      font-size: 12px !important;\n      opacity: 1 !important;\n      z-index: 1;\n      transition: all 0.1s ease;\n      position: absolute;\n      left: 0;\n      top: 4px;\n      padding: 0 2px 0 2px;\n    }\n\n    & placeholder {\n      display: none;\n    }\n  }\n}\n\n.anx-textarea textarea + label {\n  color: $anx-lightest-grey-dark !important;\n  margin-left: 17px;\n  margin-bottom: 0;\n  background-color: transparent;\n  font-size: 16px !important;\n  opacity: 1 !important;\n  z-index: 1;\n  transition: all 0.1s ease;\n  left: 0;\n  top: 24px;\n  position: absolute;\n  pointer-events: none;\n}\n\n.anx-textarea textarea[disabled] label {\n  opacity: 0 !important;\n}\n\n.anx-textarea textarea:not([disabled]) label {\n  opacity: 1;\n}\n\nspan.error {\n  font-size: 12px;\n  color: $anx-error;\n  padding: 0;\n  white-space: nowrap;\n  display: block;\n}\n</style>\n","import AnxAlert from \"./AnxAlert.vue\";\nimport AnxButton from \"./AnxButton.vue\";\nimport AnxCard from \"./AnxCard.vue\";\nimport AnxCheckbox from \"./AnxCheckbox.vue\";\nimport AnxContainer from \"./AnxContainer.vue\";\nimport AnxContent from \"./AnxContent.vue\";\nimport AnxFooter from \"./AnxFooter.vue\";\nimport AnxForm from \"./AnxForm.vue\";\nimport AnxGlobal from \"./AnxGlobal.vue\";\nimport AnxHeader from \"./AnxHeader.vue\";\nimport AnxIcon from \"./AnxIcon.vue\";\nimport AnxInput from \"./AnxInput.vue\";\nimport AnxLink from \"./AnxLink.vue\";\nimport AnxModal from \"./AnxModal.vue\";\nimport AnxParagraph from \"./AnxParagraph.vue\";\nimport AnxReadonly from \"./AnxReadonly.vue\";\nimport AnxSelect from \"./AnxSelect.vue\";\nimport AnxTable from \"./AnxTable.vue\";\nimport AnxTableCol from \"./AnxTableCol.vue\";\nimport AnxTableContainer from \"./AnxTableContainer.vue\";\nimport AnxTableRow from \"./AnxTableRow.vue\";\nimport AnxTextarea from \"./AnxTextarea.vue\";\nimport AnxTitle from \"./AnxTitle.vue\";\n\nexport default {\n  AnxAlert,\n  AnxButton,\n  AnxCard,\n  AnxCheckbox,\n  AnxContainer,\n  AnxContent,\n  AnxFooter,\n  AnxForm,\n  AnxGlobal,\n  AnxHeader,\n  AnxIcon,\n  AnxInput,\n  AnxLink,\n  AnxModal,\n  AnxParagraph,\n  AnxReadonly,\n  AnxSelect,\n  AnxTable,\n  AnxTableCol,\n  AnxTableContainer,\n  AnxTableRow,\n  AnxTextarea,\n  AnxTitle\n}\n","import _Vue from 'vue';\nimport Components from './components';\n\n/*import VueI18n from \"vue-i18n\";\nimport dePlugin from \"./locales/de.json\";\nimport enPlugin from \"./locales/en.json\";*/\n\n\nconst UIPlugin = {\n    install(Vue: typeof _Vue): void {\n        // Register all components, that have been loaded\n        for (const name in Components) {\n          Vue.component(name, (Components as any)[name])\n        }\n\n        // TODO: implement i18n for nuxt and vue\n        /*if (Object.hasOwnProperty.call(Vue.prototype.$nuxt, \"_i18n\")) {\n          seti18n(Vue.prototype.$nuxt._i18n);\n        } else {\n          Vue.prototype.$nuxt._i18n = false;\n        }\n\n        function seti18n(i18n: VueI18n) {\n          const deConsumer = i18n.getLocaleMessage(\"de\");\n          const enConsumer = i18n.getLocaleMessage(\"en\");\n\n          const de = {\n            ...deConsumer,\n            ...dePlugin\n          };\n\n          const en = {\n            ...enConsumer,\n            ...enPlugin\n          };\n\n          i18n.setLocaleMessage(\"de\", de);\n          i18n.setLocaleMessage(\"en\", en);\n        }*/\n    },\n};\n\nexport { Components };\nexport default UIPlugin;\n"],"names":["let","const","AnxAlert","AnxButton","AnxCard","AnxCheckbox","AnxContainer","AnxContent","AnxFooter","AnxForm","AnxGlobal","AnxHeader","AnxIcon","AnxInput","AnxLink","AnxModal","AnxParagraph","AnxReadonly","AnxSelect","AnxTable","AnxTableCol","AnxTableContainer","AnxTableRow","AnxTextarea","AnxTitle"],"mappings":"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"}